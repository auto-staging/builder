// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import cloudwatchevents "github.com/aws/aws-sdk-go/service/cloudwatchevents"

import context "context"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// CloudWatchEventsAPI is an autogenerated mock type for the CloudWatchEventsAPI type
type CloudWatchEventsAPI struct {
	mock.Mock
}

// DeleteRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteRule(_a0 *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteRuleInput) *cloudwatchevents.DeleteRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteRuleRequest(_a0 *cloudwatchevents.DeleteRuleInput) (*request.Request, *cloudwatchevents.DeleteRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteRuleInput) *cloudwatchevents.DeleteRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	return r0, r1
}

// DeleteRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteRuleInput, _a2 ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...request.Option) *cloudwatchevents.DeleteRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBus provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventBus(_a0 *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventBusInput) *cloudwatchevents.DescribeEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBusRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventBusRequest(_a0 *cloudwatchevents.DescribeEventBusInput) (*request.Request, *cloudwatchevents.DescribeEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventBusInput) *cloudwatchevents.DescribeEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	return r0, r1
}

// DescribeEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeEventBusWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeEventBusInput, _a2 ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...request.Option) *cloudwatchevents.DescribeEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeRule(_a0 *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeRuleInput) *cloudwatchevents.DescribeRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeRuleRequest(_a0 *cloudwatchevents.DescribeRuleInput) (*request.Request, *cloudwatchevents.DescribeRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeRuleInput) *cloudwatchevents.DescribeRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	return r0, r1
}

// DescribeRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeRuleInput, _a2 ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...request.Option) *cloudwatchevents.DescribeRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DisableRule(_a0 *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DisableRuleInput) *cloudwatchevents.DisableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DisableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DisableRuleRequest(_a0 *cloudwatchevents.DisableRuleInput) (*request.Request, *cloudwatchevents.DisableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DisableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DisableRuleInput) *cloudwatchevents.DisableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	return r0, r1
}

// DisableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DisableRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DisableRuleInput, _a2 ...request.Option) (*cloudwatchevents.DisableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...request.Option) *cloudwatchevents.DisableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) EnableRule(_a0 *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.EnableRuleInput) *cloudwatchevents.EnableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.EnableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) EnableRuleRequest(_a0 *cloudwatchevents.EnableRuleInput) (*request.Request, *cloudwatchevents.EnableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.EnableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.EnableRuleInput) *cloudwatchevents.EnableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	return r0, r1
}

// EnableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) EnableRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.EnableRuleInput, _a2 ...request.Option) (*cloudwatchevents.EnableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...request.Option) *cloudwatchevents.EnableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTarget provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRuleNamesByTarget(_a0 *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRuleNamesByTargetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTargetRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRuleNamesByTargetRequest(_a0 *cloudwatchevents.ListRuleNamesByTargetInput) (*request.Request, *cloudwatchevents.ListRuleNamesByTargetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	return r0, r1
}

// ListRuleNamesByTargetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListRuleNamesByTargetWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListRuleNamesByTargetInput, _a2 ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...request.Option) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRules(_a0 *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRulesInput) *cloudwatchevents.ListRulesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRulesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRulesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRulesRequest(_a0 *cloudwatchevents.ListRulesInput) (*request.Request, *cloudwatchevents.ListRulesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRulesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRulesInput) *cloudwatchevents.ListRulesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListRulesOutput)
		}
	}

	return r0, r1
}

// ListRulesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListRulesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListRulesInput, _a2 ...request.Option) (*cloudwatchevents.ListRulesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRulesInput, ...request.Option) *cloudwatchevents.ListRulesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRulesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTargetsByRule(_a0 *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTargetsByRuleInput) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTargetsByRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTargetsByRuleRequest(_a0 *cloudwatchevents.ListTargetsByRuleInput) (*request.Request, *cloudwatchevents.ListTargetsByRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTargetsByRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTargetsByRuleInput) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	return r0, r1
}

// ListTargetsByRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListTargetsByRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListTargetsByRuleInput, _a2 ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...request.Option) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEvents provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutEvents(_a0 *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutEventsInput) *cloudwatchevents.PutEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutEventsRequest(_a0 *cloudwatchevents.PutEventsInput) (*request.Request, *cloudwatchevents.PutEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutEventsInput) *cloudwatchevents.PutEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutEventsOutput)
		}
	}

	return r0, r1
}

// PutEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutEventsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutEventsInput, _a2 ...request.Option) (*cloudwatchevents.PutEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutEventsInput, ...request.Option) *cloudwatchevents.PutEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermission provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPermission(_a0 *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPermissionInput) *cloudwatchevents.PutPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermissionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPermissionRequest(_a0 *cloudwatchevents.PutPermissionInput) (*request.Request, *cloudwatchevents.PutPermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPermissionInput) *cloudwatchevents.PutPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	return r0, r1
}

// PutPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutPermissionWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutPermissionInput, _a2 ...request.Option) (*cloudwatchevents.PutPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...request.Option) *cloudwatchevents.PutPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutRule(_a0 *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutRuleInput) *cloudwatchevents.PutRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutRuleRequest(_a0 *cloudwatchevents.PutRuleInput) (*request.Request, *cloudwatchevents.PutRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutRuleInput) *cloudwatchevents.PutRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutRuleOutput)
		}
	}

	return r0, r1
}

// PutRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutRuleInput, _a2 ...request.Option) (*cloudwatchevents.PutRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutRuleInput, ...request.Option) *cloudwatchevents.PutRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargets provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutTargets(_a0 *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutTargetsInput) *cloudwatchevents.PutTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargetsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutTargetsRequest(_a0 *cloudwatchevents.PutTargetsInput) (*request.Request, *cloudwatchevents.PutTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutTargetsInput) *cloudwatchevents.PutTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	return r0, r1
}

// PutTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutTargetsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutTargetsInput, _a2 ...request.Option) (*cloudwatchevents.PutTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...request.Option) *cloudwatchevents.PutTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemovePermission(_a0 *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemovePermissionInput) *cloudwatchevents.RemovePermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemovePermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermissionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemovePermissionRequest(_a0 *cloudwatchevents.RemovePermissionInput) (*request.Request, *cloudwatchevents.RemovePermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemovePermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemovePermissionInput) *cloudwatchevents.RemovePermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	return r0, r1
}

// RemovePermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) RemovePermissionWithContext(_a0 context.Context, _a1 *cloudwatchevents.RemovePermissionInput, _a2 ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...request.Option) *cloudwatchevents.RemovePermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargets provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemoveTargets(_a0 *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemoveTargetsInput) *cloudwatchevents.RemoveTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemoveTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargetsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemoveTargetsRequest(_a0 *cloudwatchevents.RemoveTargetsInput) (*request.Request, *cloudwatchevents.RemoveTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemoveTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemoveTargetsInput) *cloudwatchevents.RemoveTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	return r0, r1
}

// RemoveTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) RemoveTargetsWithContext(_a0 context.Context, _a1 *cloudwatchevents.RemoveTargetsInput, _a2 ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...request.Option) *cloudwatchevents.RemoveTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPattern provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TestEventPattern(_a0 *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TestEventPatternInput) *cloudwatchevents.TestEventPatternOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TestEventPatternInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPatternRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TestEventPatternRequest(_a0 *cloudwatchevents.TestEventPatternInput) (*request.Request, *cloudwatchevents.TestEventPatternOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TestEventPatternInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TestEventPatternInput) *cloudwatchevents.TestEventPatternOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	return r0, r1
}

// TestEventPatternWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) TestEventPatternWithContext(_a0 context.Context, _a1 *cloudwatchevents.TestEventPatternInput, _a2 ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...request.Option) *cloudwatchevents.TestEventPatternOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
